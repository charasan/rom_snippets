--- a/src/merc.h
+++ b/src/merc.h
@@ -XXX,X +XXX,X @@ 
 #define ROOM_VNUM_LIMBO         2
 #define ROOM_VNUM_CHAT          1200
 #define ROOM_VNUM_TEMPLE        3001
+#define ROOM_DONATION_WEAPON    xxxx    /* vnum for weapons donation room */
+#define ROOM_DONATION_ARMOR     xxxx    /* vnum for armor donation room */
+#define ROOM_DONATION_OTHER     xxxx    /* vnum for all other donations */
 
 /*
  * Item types.
@@ -XXX,X +XXX,X @@
 #define ITEM_LOCK               (A)
 #define ITEM_EVIL               (B)
 #define ITEM_INVIS              (C)
+#define ITEM_DONATED            (R)     /* donated item flag */
 
 /*
  * Wear flags.

--- a/src/act_info.c
+++ b/src/act_info.c
@@ -XXX,X +XXX,X @@ static char *format_obj_to_char( OBJ_DATA *obj, CHAR_DATA *ch, bool fShort )
 {
     static char buf[MAX_STRING_LENGTH];
+    static char buf2[MSL];
 
     buf[0] = '\0';
+    buf2[0] = '\0';
 
     if ( obj->description == NULL || obj->description[0] == '\0' )
     {
@@ -XXX,X +XXX,X @@
         if ( obj->short_descr != NULL )
             strcat( buf, obj->short_descr );
     }
+    else if (ch->in_room == get_room_index(ROOM_DONATION_WEAPON)
+            || ch->in_room == get_room_index(ROOM_DONATION_ARMOR)
+            || ch->in_room == get_room_index(ROOM_DONATION_OTHER) )
+    {
+        if ( obj->short_descr != NULL )
+        {
+            sprintf( buf2, "%s {g[{w%d{g]{x", obj->short_descr, obj->level);
+            strcat( buf, buf2 );
+        }
+    }
     else
     {
         if ( obj->short_descr != NULL )

--- a/src/act_obj.c
+++ b/src/act_obj.c
@@ -XXX,X +XXX,X @@
     return;
 }
 
+void do_donate( CHAR_DATA *ch, char *argument )
+{
+    char arg[MAX_INPUT_LENGTH];
+    OBJ_DATA *obj;
+
+    argument = one_argument( argument, arg );
+
+    if ( arg[0] == '\0' )
+    {
+        send_to_char( "Donate what?\n\r", ch );
+        return;
+    }
+
+    if ( ( obj = get_obj_carry( ch, arg, ch ) ) == NULL )
+    {
+        send_to_char( "You do not have that item.\n\r", ch );
+        return;
+    }
+
+    if ( !can_drop_obj( ch, obj ) )
+    {
+        send_to_char( "You can't let go of it.\n\r", ch );
+        return;
+    }
+
+    if (IS_OBJ_STAT(obj,ITEM_ROT_DEATH))
+    {
+        send_to_char( "Only permanent items may be donated.\n\r", ch );
+        return;
+    }
+    
+    SET_BIT( obj->extra_flags, ITEM_DONATED );
+    obj_from_char( obj );
+
+    if (obj->item_type == ITEM_WEAPON)
+        obj_to_room( obj, get_room_index(ROOM_DONATION_WEAPON) );
+    else if (obj->item_type == ITEM_ARMOR)
+        obj_to_room( obj, get_room_index(ROOM_DONATION_ARMOR) );
+    else
+        obj_to_room( obj, get_room_index(ROOM_DONATION_OTHER) );
+
+    act( "$n donates $p to the needy.", ch, obj, NULL, TO_ROOM );
+    act( "You generously donate $p to the needy.", ch, obj, NULL, TO_CHAR );
+    return;
+}
+
 void do_drop( CHAR_DATA *ch, char *argument )
 {
     char arg[MAX_INPUT_LENGTH];
@@ -XXX,X +XXX,X @@
         send_to_char( "Drop what?\n\r", ch );
         return;
     }
+
+    if ( ch->in_room == get_room_index(ROOM_DONATION_WEAPON)
+            || ch->in_room == get_room_index(ROOM_DONATION_ARMOR)
+            || ch->in_room == get_room_index(ROOM_DONATION_OTHER) )
+    {
+        send_to_char( "You can't drop items in this room.  Try donating it.\n\r", ch);
+        return;
+    }
 
     if ( is_number( arg ) )
     {
@@ -XXX,X +XXX,X @@
         {
             /* 'get all' or 'get all.obj' */
             found = FALSE;
+            if (ch->in_room == get_room_index(ROOM_DONATION_WEAPON)
+                    || ch->in_room == get_room_index(ROOM_DONATION_ARMOR)
+                    || ch->in_room == get_room_index(ROOM_DONATION_OTHER) )
+            {
+                send_to_char("Don't be so greedy!\n\r", ch);
+                return;
+            }
+
             for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
             {
                 obj_next = obj->next_content;
@@ -XXX,X +XXX,X @@
         return;
     }
 
+    if ((ch->in_room == get_room_index(ROOM_DONATION_WEAPON)
+                    || ch->in_room == get_room_index(ROOM_DONATION_ARMOR)
+                    || ch->in_room == get_room_index(ROOM_DONATION_OTHER) )
+                    && get_trust(ch) < obj->level)
+    {
+        send_to_char("You are not powerful enough to use it.\n\r",ch);
+        return;
+    }
+
     if (!can_loot(ch,obj))
     {
         send_to_char( "Corpse looting is not permitted.\n\r", ch );
@@ -XXX,X +XXX,X @@
         return;
     }
 
+    if (ch->in_room == get_room_index(ROOM_DONATION_WEAPON)
+            || ch->in_room == get_room_index(ROOM_DONATION_ARMOR)
+            || ch->in_room == get_room_index(ROOM_DONATION_OTHER) )
+    {
+        send_to_char( "You can't sacrifice items in this room!\n\r", ch);
+        return;
+    }
+
     if ( obj->item_type == ITEM_CORPSE_PC )
     {
         if (obj->contains)

--- a/src/interp.c
+++ b/src/interp.c
@@ -XXX,X +XXX,X @@
     { "brandish",       do_brandish,    POS_RESTING,     0,  LOG_NORMAL, 1 },
     { "close",          do_close,       POS_RESTING,     0,  LOG_NORMAL, 1 },
+    { "donate",         do_donate,      POS_RESTING,     0,  LOG_NORMAL, 1 },
     { "drink",          do_drink,       POS_RESTING,     0,  LOG_NORMAL, 1 },
     { "drop",           do_drop,        POS_RESTING,     0,  LOG_NORMAL, 1 },

--- a/src/interp.h
+++ b/src/interp.h
@@ -XXX,X +XXX,X @@
 DECLARE_DO_FUN( do_delay        );
 DECLARE_DO_FUN( do_delete       );
 DECLARE_DO_FUN( do_deny         );
+DECLARE_DO_FUN( do_donate       );
 DECLARE_DO_FUN( do_description  );
 DECLARE_DO_FUN( do_down         );
